/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.example.login;

import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.SimpleAdapter;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.ImageSpan;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.Header;

import com.ctgu.util.AsyncHttp;
import com.ctgu.util.IO;
import com.ctgu.adapter.AddPicAdapter;
import com.ctgu.base.BaseUiAuth;
import com.ctgu.base.C;
import com.ctgu.ctguhelp.R;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import android.widget.Button;
import android.widget.AdapterView.OnItemClickListener;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;

public class AddTranion extends BaseUiAuth {
	private EditText edit_content;
	private Button edit_publish;
	private AlertDialog bb;
	private int[] imageIds = new int[107];
	private Builder builder;
	private ImageView expression;
	private AddPicAdapter adapter;
	private LayoutInflater inflater;
	Context context;
	private ArrayList<String> filename;
	static boolean tag;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add_tranion);
		View_Init();
	}

	private void View_Init() {
		filename = new ArrayList<String>();
		inflater = LayoutInflater.from(this);
		context = getApplicationContext();
		edit_content = (EditText) findViewById(R.id.edit_content);
		edit_publish = (Button) findViewById(R.id.edit_publish);
		expression = (ImageView) findViewById(R.id.team_singlechat_id_expression);
	
		GridView gridview = (GridView) findViewById(R.id.gridview);
		adapter = new AddPicAdapter(this);
		adapter.addItem(BitmapFactory.decodeResource(getResources(), R.drawable.add));
		gridview.setAdapter(adapter);

		edit_publish.setOnClickListener(new On_click());
		expression.setOnClickListener(new On_click());

		gridview.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				if ((adapter.getList().size() - 1) == position) {
					if (adapter.getList().size() > 2) {
						toast("最多只能添加2张");
						return;
					}
					builder = new AlertDialog.Builder(AddTranion.this);
					View v = inflater.inflate(R.layout.addpic, null);
					Button camera = (Button) v.findViewById(R.id.camera);
					Button photo = (Button) v.findViewById(R.id.photo);
					camera.setOnClickListener(new On_click());
					photo.setOnClickListener(new On_click());
					builder.setView(v);
					bb = builder.show();
				}
			}
		});

	}

	public void Post() {
		pd.setMessage("正在上传中，如果有添加图片，请耐心等待");
		pd.show();
		RequestParams params = new RequestParams();
		for (int i = 0; i < filename.size(); i++) {
			File file = new File(filename.get(i));

			try {
				params.put(String.valueOf(i), file);
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			}
		}

		params.put("user", user.getMy_userName());
		params.put("countent", edit_content.getText().toString());
		AsyncHttp.Post(C.api.addTranion, params, new AsyncHttpResponseHandler() {

			@Override
			public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
				if (pd.isShowing()) {
					pd.dismiss();
				}
				try {
					String reaponse = new String(responseBody, "utf-8");

					toast(reaponse);
					finish();
				} catch (UnsupportedEncodingException e) {
				}
			}

			@Override
			public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {

			}
		});

	}

	class On_click implements OnClickListener {

		@SuppressLint("NewApi")
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.edit_publish:
				if (!edit_content.getText().toString().trim().isEmpty()) {
					Post();
				} else {
					toast("内容不能为空");
				}
				break;
			case R.id.team_singlechat_id_expression:
				createExpressionDialog();
				break;
			case R.id.camera:
				bb.dismiss();
				Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 调用android自带的照相机
				Uri imageUri = Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "/ctguhelp/images/image"));
				intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
				startActivityForResult(intent, 1);
				break;
			case R.id.photo:
				bb.dismiss();
				Intent i = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);// 调用android的图库
				startActivityForResult(i, 2);
				break;

			}

		}
	}

	public void onTaskComplete(int taskId, Object message) {
		switch (taskId) {
		case C.task.send_message:
			if (pd.isShowing()) {
				pd.dismiss();
			}
			toast((String) message);
			finish();

		}
	}

	@SuppressLint("NewApi")
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// 完成照相后回调用此方法
		super.onActivityResult(requestCode, resultCode, data);
		String sdStatus = Environment.getExternalStorageState();
		if (!sdStatus.equals(Environment.MEDIA_MOUNTED)) { // 检测sd是否可用
			Log.v("TestFile", "SD card is not avaiable/writeable right now.");
			return;
		}

		switch (resultCode) {
		case Activity.RESULT_OK:// 照相完成点击确定
			Bitmap bitmap = null;
			switch (requestCode) {
			case 1:
				bitmap = BitmapFactory.decodeFile(Environment.getExternalStorageDirectory() + "/ctguhelp/images/image");
				if (bitmap.getWidth() > 440) {
					bitmap = zoomBitmap(bitmap);
				}
				adapter.addItem(bitmap);
				break;
			case 2:
				Uri uri = data.getData();
				ContentResolver cr = this.getContentResolver();

				try {
					bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri));
					if (bitmap.getWidth() > 440) {
						bitmap = zoomBitmap(bitmap);
					}
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				adapter.addItem(bitmap);
				break;

			}
			final Bitmap bitmap1 = bitmap;
			new Thread(new Runnable() {

				@Override
				public void run() {
					String name = IO.saveToSDka(bitmap1, getApplicationContext(), String.valueOf(System.currentTimeMillis()));
					filename.add(name);

				}
			}).start();
			break;
		case Activity.RESULT_CANCELED:// 取消
			break;
		}

	}

	/**
	 * 创建一个表情选择对话框
	 */
	private void createExpressionDialog() {
		builder = new AlertDialog.Builder(AddTranion.this);
		GridView gridView = createGridView();
		builder.setView(gridView);
		final AlertDialog bb = builder.show();
		gridView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
				Bitmap bitmap = null;
				bitmap = BitmapFactory.decodeResource(getResources(), imageIds[arg2 % imageIds.length]);
				ImageSpan imageSpan = new ImageSpan(AddTranion.this, bitmap);
				String str = null;
				if (arg2 < 10) {
					str = "f00" + arg2;
				} else if (arg2 < 100) {
					str = "f0" + arg2;
				} else {
					str = "f" + arg2;
				}
				SpannableString spannableString = new SpannableString(str);
				spannableString.setSpan(imageSpan, 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
				edit_content.append(spannableString);
				bb.dismiss();
			}
		});
	}

	private GridView createGridView() {
		final GridView view = new GridView(this);
		List<Map<String, Object>> listItems = new ArrayList<Map<String, Object>>();
		// 生成107个表情的id，封装
		for (int i = 0; i < 107; i++) {
			try {
				if (i < 10) {
					Field field = R.drawable.class.getDeclaredField("f00" + i);
					int resourceId = Integer.parseInt(field.get(null).toString());
					imageIds[i] = resourceId;
				} else if (i < 100) {
					Field field = R.drawable.class.getDeclaredField("f0" + i);
					int resourceId = Integer.parseInt(field.get(null).toString());
					imageIds[i] = resourceId;
				} else {
					Field field = R.drawable.class.getDeclaredField("f" + i);
					int resourceId = Integer.parseInt(field.get(null).toString());
					imageIds[i] = resourceId;
				}
			} catch (NumberFormatException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (NoSuchFieldException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
			Map<String, Object> listItem = new HashMap<String, Object>();
			listItem.put("image", imageIds[i]);
			listItems.add(listItem);
		}

		SimpleAdapter simpleAdapter = new SimpleAdapter(this, listItems, R.layout.team_layout_single_expression_cell, new String[] { "image" }, new int[] { R.id.image });
		view.setAdapter(simpleAdapter);
		view.setNumColumns(6);
		view.setBackgroundColor(Color.rgb(214, 211, 214));
		view.setHorizontalSpacing(1);
		view.setVerticalSpacing(1);
		view.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
		view.setGravity(Gravity.CENTER);
		return view;
	}

	/**
	 * 改变图片的大小；
	 * 
	 * @param bitmap
	 * @param width
	 * @param height
	 * @return
	 */
	public Bitmap zoomBitmap(Bitmap bitmap) {
		int w = bitmap.getWidth();
		int h = bitmap.getHeight();
		Matrix matrix = new Matrix();
		int i = 2;
		while (w / i > 562) {
			i++;
		}
		float scaleWidth = ((float) w / i / w);
		float scaleHeight = ((float) h / i / h);
		matrix.postScale(scaleWidth, scaleHeight);// 利用矩阵进行缩放不会造成内存溢出
		Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);
		return newbmp;
	}
}
